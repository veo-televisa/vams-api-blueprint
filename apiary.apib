FORMAT: 1A

# VAMS API

The VAMS (Video Access Management System) API powers the video playback integrations within the Veo architecture.

# Group User Stream
Represents actions against a user stream.

## User Stream [/play/asset/{assetId}/video/{videoId}.json]
Attempts to create a new user stream.

+ Parameters
    + assetId (integer, `1`) ... The id of the Asset.
    + videoId (integer, `1`) ... The id of the Video.

+ Model (application/json)

    ```js
    {
        "playContext": {
            "locationUri": "/player/user/1/asset/1/video/1/stream/deadbeef-dead-beef-dead-deadbeefdead.json",
            "playerState": null,
            "userStream": {
                "streamId": "deadbeef-dead-beef-dead-deadbeefdead",
                "userId": "1",
                "creationDate": 1430244268481,
                "updateDate": 1430244268481,
                "expirationDate": null,
                "interval": 10,
                "state": "CREATED",
                "assetId": "1",
                "videoId": "1"
            }
        }
    }
    ```

### Create User Stream [POST]

+ Response 201

    [User Stream][]

+ Response 500

    ```js
    {
        "message": "Unknown server error"
    }
    ```

## Update User Stream [/player/user/{userId}/asset/{assetId}/video/{videoId}/stream/{streamId}.json{?state}]
Attempts to update an existing user stream.

+ Parameters
    + userId (integer, `1`) ... The id of the User.
    + assetId (integer, `1`) ... The id of the Asset.
    + videoId (integer, `1`) ... The id of the Video.
    + streamId (string, `deadbeef-dead-beef-dead-deadbeefdead`) ... The id of the User Stream.
    + state (enum[string]) ... The transition state of the User Stream.
        + Members
            + `START` - Acquires the Stream
            + `CONTINUE` - Retains the Stream
            + `STOP` - Releases the Stream
    + program_start (integer, `0`) ... The starting timeline position.
    + timeline_position (integer, `0`) ... The current timeline position.

### Update User Stream [POST]

+ Response 200

    [User Stream][]

+ Response 400

    ```js
    {
        "message": "Invalid User Stream"
    }
    ```

+ Response 403

    ```js
    {
        "message": "Expired User Stream"
    }
    ```

+ Response 404

    ```js
    {
        "message": "User Stream not found"
    }
    ```

+ Response 410

    ```js
    {
        "message": "Terminated User Stream"
    }
    ```

+ Response 500

    ```js
    {
        "message": "Unknown server error"
    }
    ```

# Group Program Stream
Represents actions against a program stream.

## Program Stream [/watch/channel/{channelId}.json]
Attempts to create a new program stream.

+ Parameters
    + channelId (integer, `1`) ... The id of the Program.

+ Model (application/json)

    ```js
    {
        "playContext": {
            "locationUri": "/player/user/1/channel/1/stream/deadbeef-dead-beef-dead-deadbeefdead.json",
            "playerState": null,
            "userStream": {
                "streamId": "deadbeef-dead-beef-dead-deadbeefdead",
                "userId": "1",
                "creationDate": 1430244922919,
                "updateDate": 1430244922919,
                "expirationDate": null,
                "interval": 10,
                "state": "CREATED",
                "channelId": "1"
            }
        }
    }
    ```

### Create Program Stream [POST]

+ Response 201

    [Program Stream][]

+ Response 500

    ```js
    {
        "message": "Unknown server error"
    }
    ```

## Update Program Stream [/player/user/{userId}/channel/{channelId}/stream/{streamId}.json{?state}{?type}{?program_start}{?timeline_position}]
Attempts to update an existing program stream.

+ Parameters
    + userId (integer, `1`) ... The id of the User.
    + channelId (integer, `1`) ... The id of the Program.
    + streamId (string, `deadbeef-dead-beef-dead-deadbeefdead`) ... The id of the User Stream.
    + state (enum[string]) ... The transition state of the Stream.
        + Members
            + `START` - Acquires the Stream
            + `CONTINUE` - Retains the Stream
            + `STOP` - Releases the Stream
    + type (enum[string]) ... The type of Program.
        + Members
            + `LIVE` - Live stream
            + `CATCH_UP` - On-demand stream
    + program_start (integer, `0`) ... The starting timeline position.
    + timeline_position (integer, `0`) ... The current timeline position.

### Update Program Stream [POST]

+ Response 200

    [User Stream][]

+ Response 400

    ```js
    {
        "message": "Invalid User Stream"
    }
    ```

+ Response 403

    ```js
    {
        "message": "Expired User Stream"
    }
    ```

+ Response 404

    ```js
    {
        "message": "User Stream not found"
    }
    ```

+ Response 410

    ```js
    {
        "message": "Terminated User Stream"
    }
    ```

+ Response 500

    ```js
    {
        "message": "Unknown server error"
    }
    ```
