FORMAT: 1A

# VAMS API

The VAMS (Video Access Management System) API powers the video playback integrations within the Veo architecture.

# Group Asset Stream
Represents actions against a asset stream.

## Asset Stream [/play/asset/{assetId}/video/{videoId}.json]
Attempts to create a new asset stream.

+ Parameters
    + assetId (integer, `1`) ... The id of the Asset.
    + videoId (integer, `1`) ... The id of the Video.

+ Model (application/json)

    ```js
    {
        "playContext": {
            "locationUri": "/player/user/1/asset/1/video/1/stream/deadbeef-dead-beef-dead-deadbeefdead.json",
            "playerState": null,
            "userStream": {
                "streamId": "deadbeef-dead-beef-dead-deadbeefdead",
                "userId": "1",
                "creationDate": 1430244268481,
                "updateDate": 1430244268481,
                "expirationDate": 1430245268481,
                "interval": 10,
                "state": "CREATED",
                "assetId": "1",
                "videoId": "1"
            }
        }
    }
    ```

### Create Asset Stream [POST]

+ Response 201

    [Asset Stream][]

+ Response 500

    ```js
    {
        "message": "Unknown server error"
    }
    ```

## Update Asset Stream [/player/user/{userId}/asset/{assetId}/video/{videoId}/stream/{streamId}.json{?state}{?asset_duration}{?timeline_position}{?keep_position}]
Attempts to update an existing asset stream.

+ Parameters
    + userId (integer, `1`) ... The id of the User.
    + assetId (integer, `1`) ... The id of the Asset.
    + videoId (integer, `1`) ... The id of the Video.
    + streamId (string, `deadbeef-dead-beef-dead-deadbeefdead`) ... The id of the Stream.
    + state (enum[string]) ... The transition state of the Asset Stream.
        + Members
            + `START` - Acquires the Stream
            + `CONTINUE` - Retains the Stream
            + `STOP` - Releases the Stream
    + asset_duration (integer, `0`) ... The duration of the asset in seconds.
    + timeline_position (integer, `0`) ... The current timeline position in seconds.
    + keep_position (boolean, `true`) ... Keep the timeline position (only works with state:STOP)

### Update Asset Stream [POST]

+ Response 200

    [Asset Stream][]

+ Response 400

    ```js
    {
        "message": "The stream is invalid or some other generic error"
    }
    ```

+ Response 403

    ```js
    {
        "message": "The stream has expired"
    }
    ```

+ Response 404

    ```js
    {
        "message": "The stream does not exist"
    }
    ```

+ Response 409

    ```js
    {
        "message": "The stream cannot be acquired"
    }
    ```

+ Response 410

    ```js
    {
        "message": "The stream has been terminated"
    }
    ```

+ Response 500

    ```js
    {
        "message": "An unknown server error has ocurred"
    }
    ```

# Group Channel Stream
Represents actions against a channel stream.

## Channel Stream [/watch/channel/{channelId}.json]
Attempts to create a new channel stream.

+ Parameters
    + channelId (integer, `1`) ... The id of the Channel.

+ Model (application/json)

    ```js
    {
        "playContext": {
            "locationUri": "/player/user/1/channel/1/stream/deadbeef-dead-beef-dead-deadbeefdead.json",
            "playerState": null,
            "userStream": {
                "streamId": "deadbeef-dead-beef-dead-deadbeefdead",
                "userId": "1",
                "creationDate": 1430244922919,
                "updateDate": 1430244922919,
                "expirationDate": 1430245022919,
                "interval": 10,
                "state": "CREATED",
                "channelId": "1"
            }
        }
    }
    ```

### Create Channel Stream [POST]

+ Response 201

    [Channel Stream][]

+ Response 500

    ```js
    {
        "message": "Unknown server error"
    }
    ```

## Update Channel Stream [/player/user/{userId}/channel/{channelId}/stream/{streamId}.json{?state}{?type}{?listing_id}{?timeline_position}]
Attempts to update an existing channel stream.

+ Parameters
    + userId (integer, `1`) ... The id of the User.
    + channelId (integer, `1`) ... The id of the Channel.
    + streamId (string, `deadbeef-dead-beef-dead-deadbeefdead`) ... The id of the Stream.
    + state (enum[string]) ... The transition state of the Stream.
        + Members
            + `START` - Acquires the Stream
            + `CONTINUE` - Retains the Stream
            + `STOP` - Releases the Stream
    + type (enum[string]) ... The type of Stream.
        + Members
            + `LIVE` - Live stream
            + `CATCH_UP` - On-demand stream
    + listing_id (integer, `0`) ... The id of the Listing.
    + timeline_position (string, `2016-05-13T05:00:00Z`) ... The timeline position of the stream as a date (RFC 3339).

### Update Channel Stream [POST]

+ Response 200

    [Channel Stream][]

+ Response 400

    ```js
    {
        "message": "Invalid Asset Stream"
    }
    ```

+ Response 400

    ```js
    {
        "message": "The stream is invalid or some other generic error"
    }
    ```

+ Response 403

    ```js
    {
        "message": "The stream has expired"
    }
    ```

+ Response 404

    ```js
    {
        "message": "The stream does not exist"
    }
    ```

+ Response 409

    ```js
    {
        "message": "The stream cannot be acquired"
    }
    ```

+ Response 410

    ```js
    {
        "message": "The stream has been terminated"
    }
    ```

+ Response 500

    ```js
    {
        "message": "An unknown server error has ocurred"
    }
    ```

# Group Resume Play
Represents actions against resume playback functionality.

## Resume Positions [/resume/user/{userId}{?filterIds}{?filterStates}{?limit}{?offset}]
Retrieve all playback positions.

+ Parameters
    + userId (integer, `1`) ... The id of the User.
    + filterIds (optional, string, `1,2,3`) ... A comma separated list of Asset ids to filter.
    + filterStates (optional, enum[string]) ... An optional comma separated list of States to include.
        + Members
            + `started` - Returns view positions that have NOT reached the end of video experience position
            + `completed` - Returns view positions that have reached the end of video experience position
    + limit (optional, 64-bit integer, `3`) ... The maximum number of records to return.
    + offset (optional, 64-bit integer, `0`) ... The number of records to skip.

+ Model (application/json)

    ```js
    [
        {
            "assetId": 105,
            "modifiedAt": "2015-06-04T12:00:00Z",
            "viewPosition": 155,
            "state": "started"
        },    
        {
            "assetId": 4038,
            "modifiedAt": "2015-05-04T12:00:00Z",
            "viewPosition": 43,
            "state": "started"
        },
        {
            "assetId": 19889,
            "modifiedAt": "2015-04-03T12:00:00Z",
            "viewPosition": 350,
            "state": "started"
        },
        {
            "assetId": 48,
            "modifiedAt": "2015-03-02T12:05:00Z",
            "viewPosition": 0,
            "state": "started"
        },
        {
            "assetId": 40,
            "modifiedAt": "2015-02-02T12:00:00Z",
            "viewPosition": 0,
            "state": "started"
        },        
        {
            "assetId": 109,
            "modifiedAt": "2015-01-01T12:00:00Z",
            "viewPosition": 1200,
            "state": "completed"
        }
    ]
    ```

### Retrieve Resume Positions [GET]

+ Response 200

    [Resume Positions][]


## Asset Resume Position [/resume/user/{userId}/asset/{assetId}]
Retrieve the playback position for an asset.

+ Parameters
    + userId (integer, `1`) ... The id of the User.
    + assetId (integer, `1`) ... The id of the Asset.

+ Model (application/json)

    ```js
    {
        "assetId": 105,
        "modifiedAt": "2015-06-03T12:00:00Z",
        "viewPosition": 102,
        "state": "started"
    }
    ```

### Retrieve Resume Position [GET]

+ Response 200

    [Asset Resume Position][]

+ Response 404

    ```js
    {
        "message": "Resume position(s) not found"
    }
    ```

### Remove Resume Position [DELETE]

+ Response 204

+ Response 404

    ```js
    {
        "message": "Resume position(s) not found"
    }
    ```