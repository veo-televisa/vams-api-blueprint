FORMAT: 1A

# VAMS API

The VAMS (Video Access Management System) API powers the video playback integrations within the Veo architecture.

# Group Asset Stream
Represents actions against a asset stream.

## Asset Stream [/play/asset/{assetId}/video/{videoId}.json]
Attempts to create a new asset stream.

+ Parameters
    + assetId (integer, `1`) ... The id of the Asset.
    + videoId (integer, `1`) ... The id of the Video.

+ Model (application/json)

    ```js
    {
        "playContext": {
            "locationUri": "/player/user/1/asset/1/video/1/stream/deadbeef-dead-beef-dead-deadbeefdead.json",
            "playerState": null,
            "userStream": {
                "streamId": "deadbeef-dead-beef-dead-deadbeefdead",
                "userId": "1",
                "creationDate": 1430244268481,
                "updateDate": 1430244268481,
                "expirationDate": null,
                "interval": 10,
                "state": "CREATED",
                "assetId": "1",
                "videoId": "1"
            }
        }
    }
    ```

### Create Asset Stream [POST]

+ Response 201

    [Asset Stream][]

+ Response 500

    ```js
    {
        "message": "Unknown server error"
    }
    ```

## Update Asset Stream [/player/user/{userId}/asset/{assetId}/video/{videoId}/stream/{streamId}.json{?state}{?asset_duration}{?timeline_position}]
Attempts to update an existing asset stream.

+ Parameters
    + userId (integer, `1`) ... The id of the User.
    + assetId (integer, `1`) ... The id of the Asset.
    + videoId (integer, `1`) ... The id of the Video.
    + streamId (string, `deadbeef-dead-beef-dead-deadbeefdead`) ... The id of the Asset Stream.
    + state (enum[string]) ... The transition state of the Asset Stream.
        + Members
            + `START` - Acquires the Stream
            + `CONTINUE` - Retains the Stream
            + `STOP` - Releases the Stream
    + asset_duration (integer, `0`) ... The duration of the asset in seconds.
    + timeline_position (integer, `0`) ... The current timeline position in seconds.

### Update Asset Stream [POST]

+ Response 200

    [Asset Stream][]

+ Response 400

    ```js
    {
        "message": "Invalid Asset Stream"
    }
    ```

+ Response 403

    ```js
    {
        "message": "Expired Asset Stream"
    }
    ```

+ Response 404

    ```js
    {
        "message": "Asset Stream not found"
    }
    ```

+ Response 410

    ```js
    {
        "message": "Terminated Asset Stream"
    }
    ```

+ Response 500

    ```js
    {
        "message": "Unknown server error"
    }
    ```

# Group Channel Stream
Represents actions against a channel stream.

## Channel Stream [/watch/channel/{channelId}.json]
Attempts to create a new channel stream.

+ Parameters
    + channelId (integer, `1`) ... The id of the Channel.

+ Model (application/json)

    ```js
    {
        "playContext": {
            "locationUri": "/player/user/1/channel/1/stream/deadbeef-dead-beef-dead-deadbeefdead.json",
            "playerState": null,
            "userStream": {
                "streamId": "deadbeef-dead-beef-dead-deadbeefdead",
                "userId": "1",
                "creationDate": 1430244922919,
                "updateDate": 1430244922919,
                "expirationDate": null,
                "interval": 10,
                "state": "CREATED",
                "channelId": "1"
            }
        }
    }
    ```

### Create Channel Stream [POST]

+ Response 201

    [Channel Stream][]

+ Response 500

    ```js
    {
        "message": "Unknown server error"
    }
    ```

## Update Channel Stream [/player/user/{userId}/channel/{channelId}/stream/{streamId}.json{?state}{?type}{?program_start}{?timeline_position}]
Attempts to update an existing channel stream.

+ Parameters
    + userId (integer, `1`) ... The id of the User.
    + channelId (integer, `1`) ... The id of the Channel.
    + streamId (string, `deadbeef-dead-beef-dead-deadbeefdead`) ... The id of the Asset Stream.
    + state (enum[string]) ... The transition state of the Stream.
        + Members
            + `START` - Acquires the Stream
            + `CONTINUE` - Retains the Stream
            + `STOP` - Releases the Stream
    + type (enum[string]) ... The type of Channel.
        + Members
            + `LIVE` - Live stream
            + `CATCH_UP` - On-demand stream
    + program_start (integer, `0`) ... The starting timeline position as a Unix timestamp.
    + timeline_position (integer, `0`) ... The current timeline position in seconds.

### Update Channel Stream [POST]

+ Response 200

    [Asset Stream][]

+ Response 400

    ```js
    {
        "message": "Invalid Asset Stream"
    }
    ```

+ Response 403

    ```js
    {
        "message": "Expired Asset Stream"
    }
    ```

+ Response 404

    ```js
    {
        "message": "Asset Stream not found"
    }
    ```

+ Response 410

    ```js
    {
        "message": "Terminated Asset Stream"
    }
    ```

+ Response 500

    ```js
    {
        "message": "Unknown server error"
    }
    ```

# Group Resume Play
Represents actions against resume playback functionality.

## Resume Positions [/resume/user/{userId}{?filterIds}]
Retrieve all playback positions.

+ Parameters
    + userId (integer, `1`) ... The id of the User.
    + filterIds (optional string, `1,2,3`) ... The ids of the Asset to filter.

+ Model (application/json)

    ```js
    [
        {
            "assetId": 4038,
            "modifiedAt": "2015-06-03T12:00:00Z",
            "viewPosition": 43
        },
        {
            "assetId": 19889,
            "modifiedAt": "2015-06-02T12:00:00Z",
            "viewPosition": 350
        },
        {
            "assetId": 48,
            "modifiedAt": "2015-06-01T12:00:00Z",
            "viewPosition": 0
        }
    ]
    ```

### Retrieve Resume Positions [GET]

+ Response 200

    [Resume Positions][]


## Asset Resume Position [/resume/user/{userId}/asset/{assetId}]
Retrieve the playback position for an asset.

+ Parameters
    + userId (integer, `1`) ... The id of the User.
    + assetId (integer, `1`) ... The id of the Asset.

+ Model (application/json)

    ```js
    {
        "assetId": 4038,
        "modifiedAt": "2015-06-03T12:00:00Z",
        "viewPosition": 0
    }
    ```

### Retrieve Resume Position [GET]

+ Response 200

    [Asset Resume Position][]

+ Response 404

    ```js
    {
        "message": "Resume position not found"
    }
    ```
